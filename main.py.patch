# Patch generated by Pyment v0.3.3

--- a/main.py
+++ b/main.py
@@ -16,35 +16,27 @@
 
 
 def gamma(theta):
-    """
-    Evalutes gamma(theta). Due to numpy not liking computing negative numbers
+    """Evalutes gamma(theta). Due to numpy not liking computing negative numbers
     to any scalar power, np.sign and np.abs is used to circumvent this.
 
-    Parameters
-    ----------
-    theta : float
-        The dimensionless density
+    :param theta: 
+
+    
     """
     return np.sign(theta) * np.abs(theta)**(2/3) / (3 * (1 + np.sign(theta) * np.abs(theta)**(2/3))**0.5)
 
 
 def dtheta_dx(x, theta, mu):
-    """
-    Evalutates dtheta/dx.
+    """Evalutates dtheta/dx.
 
-    Parameters
-    ----------
-    x : float
-        The dimensionless radius
-    theta : float
-        The dimensionless density
-    mu : float
-        The dimensionless enclosed mass
+    :param x: The dimensionless radius
+    :type x: float
+    :param theta: The dimensionless density
+    :type theta: float
+    :param mu: The dimensionless enclosed mass
+    :type mu: float
 
-    Returns
-    -------
-    float
-        dtheta/dx evaluated
+    
     """
  
     if x < 1e-4:
@@ -54,58 +46,41 @@
 
 
 def dmu_dx(x, theta):
-    """
-    Evalutates dmu/dx.
+    """Evalutates dmu/dx.
 
-    Parameters
-    ----------
-    x : float
-        The dimensionless radius
-    theta : float
-        The dimensionless density
+    :param x: The dimensionless radius
+    :type x: float
+    :param theta: The dimensionless density
+    :type theta: float
 
-    Returns
-    -------
-    float
-        dmu/dx evaluated
+    
     """
     return 3 * x**2 * theta
 
 
 def q(x, y):
-    """
-    Paramaterises the system of ODEs into the expected form for solve_ivp.
+    """Paramaterises the system of ODEs into the expected form for solve_ivp.
 
-    Parameters
-    ----------
-    x : float
-        The dimensionless radius
-    y : (2,) ndarray
-        The values of theta and mu (the dimensionless mass and radius)
+    :param x: The dimensionless radius
+    :type x: float
+    :param y: The values of theta and mu (the dimensionless mass and radius)
+    :type y: (2,) ndarray
+
     
-    Returns
-    -------
-    (2,) ndarray
-        The system of ODEs evaluated
     """
 
     return np.array([dtheta_dx(x, y[0], y[1]), dmu_dx(x, y[0])])
 
 
 def event(x, y):
-    """
-    Returns the value of theta, to allow root solving to find when theta = 0.
+    """Returns the value of theta, to allow root solving to find when theta = 0.
 
-    Parameters
-    ----------
-    x : float
-        The dimensionless radius (not used but required by solve_ivp)
-    y : (2,) ndarray
-        The values of theta and mu (the dimensionless mass and radius)
-    Returns
-    -------
-    float
-        The value of theta
+    :param x: The dimensionless radius (not used but required by solve_ivp)
+    :type x: float
+    :param y: 
+    :type y: (2,) ndarray
+
+    
     """
 
     return y[0]
@@ -114,29 +89,23 @@
 
       
 def get_mass_radius(theta_0, x_min=0.0, x_max=10.0, terminator=event):
-    """
-    Estimates the mass per Ye^2 and radius per Ye of a white dwarf for a given 
-    initial core density. Solves the ivp for increasing x, from x = 0 until 
-    theta = 0. This termination is determined using scipy.integrate.solve_ivp's 
-    events, this attempts to find roots of the function between sequential 
-    integration steps. Takes the final values of mu and x as the values of the 
-    stars dimensionless mass and radius. Calculates the mass and radius of the 
+    """Estimates the mass per Ye^2 and radius per Ye of a white dwarf for a given
+    initial core density. Solves the ivp for increasing x, from x = 0 until
+    theta = 0. This termination is determined using scipy.integrate.solve_ivp's
+    events, this attempts to find roots of the function between sequential
+    integration steps. Takes the final values of mu and x as the values of the
+    stars dimensionless mass and radius. Calculates the mass and radius of the
     white dwarf using m = M_0 * mu, r = R_0 * x.
 
-    Parameters
-    ----------
-    theta_0 : float
-        The initial dimensionless core density
-    x_min : float {default : 0.0}
-        The lower integration bound
-    x_max : float {default : 10.0}
-        The upper integration bound
+    :param theta_0: The initial dimensionless core density
+    :type theta_0: float
+    :param x_min: The lower integration bound (Default value = 0.0)
+    :type x_min: float {default : 0.0}
+    :param x_max: The upper integration bound (Default value = 10.0)
+    :type x_max: float {default : 10.0}
+    :param terminator:  (Default value = event)
 
-    Returns
-    -------
-    (2,) ndarray
-        The estimated mass and radius of the white dwarf per Ye^2 and Ye
-        respectively
+    
     """
 
     # the inital values of theta and mu
@@ -154,55 +123,38 @@
 
 
 def calc_radius(x):
-    """
-    Calculate the physical radius per solar radius from the dimensionless radius.
+    """Calculate the physical radius per solar radius from the dimensionless radius.
 
-    Parameters
-    ----------
-    x : float
-        The dimensionless radius
+    :param x: The dimensionless radius
+    :type x: float
 
-    Returns
-    -------
-    float
-        The enclosed radius per solar radius.
+    
     """
     return consts.R_0 * x / consts.SOLAR_RADIUS
 
 
 def calc_mass(mu):
-    """
-    Calculate the physical mass per solar mass from the dimensionless mass.
+    """Calculate the physical mass per solar mass from the dimensionless mass.
 
-    Parameters
-    ----------
-    mu : float
-        The dimensionless mass
+    :param mu: The dimensionless mass
+    :type mu: float
 
-    Returns
-    -------
-    float
-        The enclosed mass per solar mass.
+    
     """
     return consts.M_0 * mu / consts.SOLAR_MASS
 
 
 def apply_Ye_scale(data, Ye=0.5):
-    """
-    Scale Masses and Radii by Ye (the electron fraction). 
+    """Scale Masses and Radii by Ye (the electron fraction).
     Mass proportional to R^3 * rho => Ye^2.
 
-    Parameters
-    ----------
-    data : (N, 2,) ndarray
-        Input data of Mass and Radii. Expected format: [[Mass, Radius],...]
-    Ye : float {default: 0.5}
-        The value of the electron faction to scale with.
-    Returns
-    -------
-    (N, 2,) np.ndarray
-        The scaled Masses and Radii
-    """ 
+    :param data: Input data of Mass and Radii. Expected format: [[Mass, Radius],...]
+    :type data: (N, 2,) ndarray
+    :param Ye:  (Default value = 0.5)
+    :type Ye: float {default: 0.5}
+
+    
+    """
 
     data[:, 0] = data[:, 0] * Ye**2
     data[: ,1] = data[:, 1] * Ye
