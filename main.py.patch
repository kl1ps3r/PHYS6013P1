# Patch generated by Pyment v0.3.3

--- a/main.py
+++ b/main.py
@@ -4,29 +4,69 @@
 import consts
 
 def calc_radius(red_rad):
+    """
+
+    :param red_rad: 
+
+    """
     # Calculate the physical radius from the reduced radius
     return consts.R_0 * red_rad / consts.SOLAR_RADIUS
 
 def calc_mass(red_mass):
+    """
+
+    :param red_mass: 
+
+    """
     # Calculate the physical mass from the reduced mass
     return consts.M_0 * red_mass / consts.SOLAR_MASS
 
 def gamma(rho):
+    """
+
+    :param rho: 
+
+    """
     return np.sign(rho) * np.abs(rho)**(2/3) / (3 * (1 + np.sign(rho) * np.abs(rho)**(2/3))**0.5)
 
 def dtheta_dx(x, theta, mu):
+    """
+
+    :param x: 
+    :param theta: 
+    :param mu: 
+
+    """
     if x < 1e-4:
         return - x * theta / (gamma(theta)) 
     else:
         return - mu * theta / (gamma(theta) * x**2)
 
 def dmu_dx(x, theta):
+    """
+
+    :param x: 
+    :param theta: 
+
+    """
     return 3 * x**2 * theta
 
 def q(x, y):
+    """
+
+    :param x: 
+    :param y: 
+
+    """
     return np.array([dtheta_dx(x, y[0], y[1]), dmu_dx(x, y[0])])
 
 def event(t, y):
+    """
+
+    :param t: 
+    :param y: 
+
+    """
     return y[0]
 event.terminal = True
 
@@ -37,18 +77,23 @@
 q_0 = np.array([1, 0])       
 
 def get_mass_radius(theta_0):
+    """
+
+    :param theta_0: 
+
+    """
     sol = integrate.solve_ivp(q, [t_min, t_max], theta_0*q_0, max_step=0.001, events=event)
     mass = calc_mass(sol.y_events[0].T[1])
     radius = calc_radius(sol.t_events[0])
     return np.array([mass, radius])
 
 def apply_Ye_scale(data, Ye=0.5):
+    """Scale Mass and Radius by Ye (the electron fraction)
+
+    :param data: np
+    :param Ye: float (Default value = 0.5)
+
     """
-    Scale Mass and Radius by Ye (the electron fraction)
-    Parameters:
-    data: np.ndarry
-    Ye: float {default: 0.5}
-    """ 
     data[:, 0] = data[:, 0] * Ye**2
     data[: ,1] = data[:, 1] * Ye
     return data
